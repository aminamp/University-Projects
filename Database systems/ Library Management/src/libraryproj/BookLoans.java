/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package libraryproj;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Amin
 */
public class BookLoans extends javax.swing.JDialog {
    
    public static int book_id_length = 10;
    public static int author_length = 80;
    public static int title_length = 80;
    public static int fname_length = 30;
    public static int mname_length = 1;
    public static int lname_length = 30;
    public static int addr_length = 80;
    public static int phone_length = 14;
    public static int branch_length = 30;
    public static int card_no_length = 10;
    

    /**
     * Creates new form BookLoans
     */
    public BookLoans(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpenFile = new javax.swing.JButton();
        Tableonly = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        OpenFile.setText("Open File (Upload data)");
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });

        Tableonly.setText("Create Table Only");
        Tableonly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TableonlyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(OpenFile)
                    .addComponent(Tableonly, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(OpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(Tableonly, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        
        
        JFileChooser fileopen = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Text/CSV file", "txt", "csv");
        fileopen.addChoosableFileFilter(filter);
        fileopen.showOpenDialog(this);
        File file = fileopen.getSelectedFile();
        
        int count = 0;
        try {
            
            Connection conn = null;

            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "ENmPqspN");

            Statement stmt = conn.createStatement();

            stmt.execute("CREATE DATABASE IF NOT EXISTS library ;");

            stmt.execute("use library;");

            //if the table already exists --> drop it and then create
            ResultSet rs = stmt.executeQuery("SHOW TABLES LIKE 'BOOK_LOANS';");
            if (rs.next()) {
                stmt.execute("DROP TABLE BOOK_LOANS");
            }
            


            
            
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) 
            {
                String line;
                String split_line[];
                String split[];
                
                int loan_id;
                String book_id;
                int branch_id;
                String card_no;
                Date date_out = null;
                Date due_date = null;
                Date date_in = null;

                

                line = reader.readLine();// Dismiss heading line
                
          stmt.execute("CREATE TABLE BOOK_LOANS ( "
                    + "loan_id int NOT NULL auto_increment PRIMARY KEY, "
                    + "book_id  " + " varchar(" + book_id_length + ") not null,"
                    + "branch_id" + " int Default NULL, "
                    + "card_no" + " varchar(" + card_no_length + "),"
                    + "date_out" + " DATE Default NULL,"
                    + "due_date" + " DATE,"
                    + "date_in"  + " DATE DEFAULT NULL" 
                    + ") ");
          
                    DateFormat formatter = null;
          

                    formatter = new SimpleDateFormat("yyyy-MM-dd");


                while ((line = reader.readLine()) != null) {

                    
                    split_line = line.split("\t");
                    loan_id = Integer.parseInt(split_line[0]);
                    book_id = split_line[1];
                    branch_id = Integer.parseInt(split_line[2]);
                    card_no = split_line[3];
                    try{
                    date_out = formatter.parse(split_line[4]);
                    due_date = formatter.parse(split_line[5]);
                    }
                    catch ( Exception ex ){
                            System.out.println(ex);
                        }
                    
                    
                    
                    if( !"NULL".equals(split_line[6]) )
                    {
                    try{
                            date_in = formatter.parse(split_line[6]);
                    }
                    catch ( Exception ex ){
                            System.out.println(ex);
                        }
                    
                           stmt.execute("INSERT INTO BOOK_LOANS VALUES ('"
                            + loan_id + "','"
                            + book_id + "','"
                            + branch_id + "','"
                            + card_no + "','"
                            + formatter.format(date_out) + "','"
                            + formatter.format(due_date) + "','"
                            + formatter.format(date_in) + "');");


                    } else stmt.execute("INSERT INTO BOOK_LOANS VALUES ('"
                            + loan_id + "','"
                            + book_id + "','"
                            + branch_id + "','"
                            + card_no + "','"
                            + formatter.format(date_out) + "','"
                            + formatter.format(due_date) + "',null);");

                    
                }
            }
            
            
            ResultSet rs1 = stmt.executeQuery("SHOW TABLES LIKE 'FINES';");
            if (rs1.next()) {
                stmt.execute("DROP TABLE FINES");
            }
            
            stmt.execute("CREATE TABLE FINES ( "
                    + "loan_id int NOT NULL  PRIMARY KEY, "
                    + "fine_amt DECIMAL(10,2) NOT NULL,"
                    + "paid boolean NOT NULL" 
                    + ") ");
            
            conn.close();
            System.out.println("Book Loans Data loaded");
            System.out.println("Table Fines Created");
            this.dispose();
        } catch (SQLException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
			ex.printStackTrace();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
			ex.printStackTrace();
        }
        
    }//GEN-LAST:event_OpenFileActionPerformed

    private void TableonlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TableonlyActionPerformed

            try {
            
            Connection conn = null;

            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "ENmPqspN");

            Statement stmt = conn.createStatement();

            stmt.execute("CREATE DATABASE IF NOT EXISTS library ;");

            stmt.execute("use library;");

            //if the table already exists --> drop it and then create
            ResultSet rs = stmt.executeQuery("SHOW TABLES LIKE 'BOOK_LOANS';");
            if (rs.next()) {
                stmt.execute("DROP TABLE BOOK_LOANS");
            }
            
            
            stmt.execute("CREATE TABLE BOOK_LOANS ( "
                    + "loan_id int NOT NULL auto_increment PRIMARY KEY, "
                    + "book_id  " + " varchar(" + book_id_length + ") not null,"
                    + "branch_id" + " int Default NULL, "
                    + "card_no" + " varchar(" + card_no_length + "),"
                    + "date_out" + " DATE Default NULL,"
                    + "due_date" + " DATE,"
                    + "date_in"  + " DATE DEFAULT NULL" 
                    + ") ");
            
            
            ResultSet rs1 = stmt.executeQuery("SHOW TABLES LIKE 'FINES';");
            if (rs1.next()) {
                stmt.execute("DROP TABLE FINES");
            }
            
            stmt.execute("CREATE TABLE FINES ( "
                    + "loan_id int NOT NULL  PRIMARY KEY, "
                    + "fine_amt DECIMAL(10,2) NOT NULL,"
                    + "paid boolean NOT NULL" 
                    + ") ");
            
            
            JOptionPane.showMessageDialog(this, "Book Loans and Fines Table Created");
            
            
             conn.close();
            System.out.println("Book Loans Table Created");
            this.dispose();
                        }
            catch (SQLException ex) {
            System.out.println("Error in connection: " + ex.getMessage());
            }
    }//GEN-LAST:event_TableonlyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BookLoans dialog = new BookLoans(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OpenFile;
    private javax.swing.JButton Tableonly;
    // End of variables declaration//GEN-END:variables
}
